= Motivation

When doing multi-column liquid layouts on the web, it's often preferrable to have your data sorted into columns instead of rows. 

For example, if you tried to do a 3 column liquid layout of the sorted array [1, 2, .... 11], you would end up with: 

  1   2   3
  4   5   6
  7   8   9
  10  11

However, you might find that your readers prefer seeing the data sorted down into columns:


  1   5   9
  2   6   10
  3   7   11 
  4   8

To acheive this while still using only a single "ul" containing multiple "li" elements, you can use the "column\_sort" method
provided by this gem.

= Installation

Install the gem from rubygems.org:

  # gem install liquidity

= Usage

Though I would imagine you would typically be using this for doing liquid layouts on the web, for the purposes of instruction, we'll
imagine that we have the following method for printing out an array: 

  def print_matrix(a)
    a.each_slice(3) do |slice|
      puts slice.join("\t")
    end
  end

If we passed off the array of (1..11) to it, we would see the following printed: 

  a = (1..11).to_a
  print_matrix a
  # ==> 
    1   2   3
    4   5   6
    7   8   9
    10  11
   
Now, imagine that we wanted see the matrix where the data was sorted into columns, not rows. We can use the "column\_sort" method 
provided by the "liquidity" gem: 

  require 'liquidity'
  a = (1..11).to_a
  print_matrix a.column_sort(3)
  # ==> 
    1   5   9
    2   6   10
    3   7   11 
    4   8

== Passing a block to column_sort 

Just like the {Array::sort}[http://ruby-doc.org/core/classes/Array.html#M002185] method, you can pass a block to column_sort. 
